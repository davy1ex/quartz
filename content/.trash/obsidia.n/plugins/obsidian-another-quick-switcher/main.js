/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

/**
 * Use as compareFn in sort
 */
const sorter = (toOrdered, order = "asc") => {
    return (a, b) => order === "asc"
        ? toOrdered(a) > toOrdered(b)
            ? 1
            : toOrdered(b) > toOrdered(a)
                ? -1
                : 0
        : toOrdered(a) < toOrdered(b)
            ? 1
            : toOrdered(b) < toOrdered(a)
                ? -1
                : 0;
};
function flatten(matrix) {
    return [].concat(...matrix);
}
function uniq(values) {
    return [...new Set(values)];
}
function uniqFlatMap(values, mapper) {
    return uniq(flatten(values.map(mapper)));
}
const minBy = (collection, toNum) => {
    const select = (a, b) => (toNum(a) <= toNum(b) ? a : b);
    return collection.reduce(select);
};
function ignoreItems(items, patternsSeparatedLineBreak, toPath) {
    const ps = patternsSeparatedLineBreak.split("\n").filter((x) => x);
    return ps.length === 0
        ? items
        : items.filter((x) => !ps.some((p) => toPath(x).startsWith(p)));
}

function basename(path, ext) {
    var _a, _b;
    const name = (_b = (_a = path.match(/.+[\\/]([^\\/]+)[\\/]?$/)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : path;
    return ext && name.endsWith(ext) ? name.replace(ext, "") : name;
}
function extname(path) {
    const ext = basename(path).split(".").slice(1).pop();
    return ext ? `.${ext}` : "";
}
function dirname(path) {
    var _a, _b;
    return (_b = (_a = path.match(/(.+)[\\/].+$/)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : ".";
}

class AppHelper {
    constructor(app) {
        this.app = app;
    }
    getFolders() {
        return this.app.vault
            .getAllLoadedFiles()
            .filter((x) => x instanceof obsidian.TFolder);
    }
    findFirstLinkOffset(file, linkFile) {
        var _a, _b;
        const fileCache = this.app.metadataCache.getFileCache(file);
        const links = (_a = fileCache.links) !== null && _a !== void 0 ? _a : [];
        const embeds = (_b = fileCache.embeds) !== null && _b !== void 0 ? _b : [];
        return [...links, ...embeds].find((x) => {
            var _a;
            const toLinkFilePath = (_a = this.app.metadataCache.getFirstLinkpathDest(x.link, file.path)) === null || _a === void 0 ? void 0 : _a.path;
            return toLinkFilePath === linkFile.path;
        }).position.start.offset;
    }
    // noinspection FunctionWithMultipleLoopsJS
    createBacklinksMap() {
        const backLinksMap = {};
        for (const [filePath, linkMap] of Object.entries(this.app.metadataCache.resolvedLinks)) {
            for (const linkPath of Object.keys(linkMap)) {
                if (!backLinksMap[linkPath]) {
                    backLinksMap[linkPath] = new Set();
                }
                backLinksMap[linkPath].add(filePath);
            }
        }
        return backLinksMap;
    }
    openMarkdownFile(file, newLeaf, offset = 0) {
        var _a;
        const leaf = this.app.workspace.getLeaf(newLeaf);
        leaf
            .openFile(file, (_a = this.app.workspace.activeLeaf) === null || _a === void 0 ? void 0 : _a.getViewState())
            .then(() => {
            this.app.workspace.setActiveLeaf(leaf, true, true);
            const viewOfType = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
            if (viewOfType) {
                const editor = viewOfType.editor;
                const pos = editor.offsetToPos(offset);
                editor.setCursor(pos);
                editor.scrollIntoView({ from: pos, to: pos }, true);
            }
        });
    }
    searchPhantomFiles() {
        return uniq(flatten(Object.values(this.app.metadataCache.unresolvedLinks).map(Object.keys))).map((x) => this.createPhantomFile(x));
    }
    insertLinkToActiveFileBy(file) {
        const activeMarkdownView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (!activeMarkdownView) {
            return;
        }
        const linkText = this.app.fileManager.generateMarkdownLink(file, activeMarkdownView.file.path);
        const editor = activeMarkdownView.editor;
        editor.replaceSelection(linkText);
    }
    createMarkdown(linkText) {
        return __awaiter(this, void 0, void 0, function* () {
            const linkPath = this.getPathToBeCreated(linkText);
            if (yield this.exists(linkPath)) {
                return null;
            }
            const dir = dirname(linkPath);
            if (!(yield this.exists(dir))) {
                yield this.app.vault.createFolder(dir);
            }
            return this.app.vault.create(linkPath, "");
        });
    }
    exists(normalizedPath) {
        return this.app.vault.adapter.exists(normalizedPath);
    }
    getPathToBeCreated(linkText) {
        let linkPath = obsidian.getLinkpath(linkText);
        if (extname(linkPath) !== ".md") {
            linkPath += ".md";
        }
        if (linkPath.includes("/")) {
            return linkPath;
        }
        const parent = this.app.fileManager.getNewFileParent("").path;
        return `${parent}/${linkPath}`;
    }
    // TODO: Use another interface instead of TFile
    createPhantomFile(linkText) {
        const linkPath = this.getPathToBeCreated(linkText);
        return {
            path: linkPath,
            name: basename(linkPath),
            vault: this.app.vault,
            extension: "md",
            basename: basename(linkPath, ".md"),
            parent: {
                name: basename(dirname(linkPath)),
                path: dirname(linkPath),
                vault: this.app.vault,
                // XXX: From here, Untrusted properties
                children: [],
                parent: undefined,
                isRoot: () => true,
            },
            stat: {
                mtime: 0,
                ctime: 0,
                size: 0,
            },
        };
    }
}

/*
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
/*
Note: Customized for TypeScript
 */
const defaultDiacriticsRemovalMap = [
    {
        base: "A",
        letters: "\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F",
    },
    { base: "AA", letters: "\uA732" },
    { base: "AE", letters: "\u00C6\u01FC\u01E2" },
    { base: "AO", letters: "\uA734" },
    { base: "AU", letters: "\uA736" },
    { base: "AV", letters: "\uA738\uA73A" },
    { base: "AY", letters: "\uA73C" },
    {
        base: "B",
        letters: "\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181",
    },
    {
        base: "C",
        letters: "\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E",
    },
    {
        base: "D",
        letters: "\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779\u00D0",
    },
    { base: "DZ", letters: "\u01F1\u01C4" },
    { base: "Dz", letters: "\u01F2\u01C5" },
    {
        base: "E",
        letters: "\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E",
    },
    { base: "F", letters: "\u0046\u24BB\uFF26\u1E1E\u0191\uA77B" },
    {
        base: "G",
        letters: "\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E",
    },
    {
        base: "H",
        letters: "\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D",
    },
    {
        base: "I",
        letters: "\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197",
    },
    { base: "J", letters: "\u004A\u24BF\uFF2A\u0134\u0248" },
    {
        base: "K",
        letters: "\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2",
    },
    {
        base: "L",
        letters: "\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780",
    },
    { base: "LJ", letters: "\u01C7" },
    { base: "Lj", letters: "\u01C8" },
    { base: "M", letters: "\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C" },
    {
        base: "N",
        letters: "\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4",
    },
    { base: "NJ", letters: "\u01CA" },
    { base: "Nj", letters: "\u01CB" },
    {
        base: "O",
        letters: "\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C",
    },
    { base: "OI", letters: "\u01A2" },
    { base: "OO", letters: "\uA74E" },
    { base: "OU", letters: "\u0222" },
    { base: "OE", letters: "\u008C\u0152" },
    { base: "oe", letters: "\u009C\u0153" },
    {
        base: "P",
        letters: "\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754",
    },
    { base: "Q", letters: "\u0051\u24C6\uFF31\uA756\uA758\u024A" },
    {
        base: "R",
        letters: "\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782",
    },
    {
        base: "S",
        letters: "\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784",
    },
    {
        base: "T",
        letters: "\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786",
    },
    { base: "TZ", letters: "\uA728" },
    {
        base: "U",
        letters: "\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244",
    },
    { base: "V", letters: "\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245" },
    { base: "VY", letters: "\uA760" },
    {
        base: "W",
        letters: "\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72",
    },
    { base: "X", letters: "\u0058\u24CD\uFF38\u1E8A\u1E8C" },
    {
        base: "Y",
        letters: "\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE",
    },
    {
        base: "Z",
        letters: "\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762",
    },
    {
        base: "a",
        letters: "\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250",
    },
    { base: "aa", letters: "\uA733" },
    { base: "ae", letters: "\u00E6\u01FD\u01E3" },
    { base: "ao", letters: "\uA735" },
    { base: "au", letters: "\uA737" },
    { base: "av", letters: "\uA739\uA73B" },
    { base: "ay", letters: "\uA73D" },
    {
        base: "b",
        letters: "\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253",
    },
    {
        base: "c",
        letters: "\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184",
    },
    {
        base: "d",
        letters: "\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A",
    },
    { base: "dz", letters: "\u01F3\u01C6" },
    {
        base: "e",
        letters: "\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD",
    },
    { base: "f", letters: "\u0066\u24D5\uFF46\u1E1F\u0192\uA77C" },
    {
        base: "g",
        letters: "\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F",
    },
    {
        base: "h",
        letters: "\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265",
    },
    { base: "hv", letters: "\u0195" },
    {
        base: "i",
        letters: "\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131",
    },
    { base: "j", letters: "\u006A\u24D9\uFF4A\u0135\u01F0\u0249" },
    {
        base: "k",
        letters: "\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3",
    },
    {
        base: "l",
        letters: "\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747",
    },
    { base: "lj", letters: "\u01C9" },
    { base: "m", letters: "\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F" },
    {
        base: "n",
        letters: "\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5",
    },
    { base: "nj", letters: "\u01CC" },
    {
        base: "o",
        letters: "\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275",
    },
    { base: "oi", letters: "\u01A3" },
    { base: "ou", letters: "\u0223" },
    { base: "oo", letters: "\uA74F" },
    {
        base: "p",
        letters: "\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755",
    },
    { base: "q", letters: "\u0071\u24E0\uFF51\u024B\uA757\uA759" },
    {
        base: "r",
        letters: "\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783",
    },
    {
        base: "s",
        letters: "\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B",
    },
    {
        base: "t",
        letters: "\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787",
    },
    { base: "tz", letters: "\uA729" },
    {
        base: "u",
        letters: "\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289",
    },
    { base: "v", letters: "\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C" },
    { base: "vy", letters: "\uA761" },
    {
        base: "w",
        letters: "\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73",
    },
    { base: "x", letters: "\u0078\u24E7\uFF58\u1E8B\u1E8D" },
    {
        base: "y",
        letters: "\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF",
    },
    {
        base: "z",
        letters: "\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763",
    },
];
const diacriticsMap = {};
for (let i = 0; i < defaultDiacriticsRemovalMap.length; i++) {
    const letters = defaultDiacriticsRemovalMap[i].letters;
    for (let j = 0; j < letters.length; j++) {
        diacriticsMap[letters[j]] = defaultDiacriticsRemovalMap[i].base;
    }
}

const regEmoji = new RegExp(/[\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF]|[\uFE0E-\uFE0F]/, "g");
function excludeSpace(text) {
    return text.replace(/ /g, "");
}
function excludeEmoji(text) {
    return text.replace(regEmoji, "");
}
function normalizeAccentsDiacritics(text) {
    // https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript
    return text.replace(/[^\u0000-\u007E]/g, (x) => { var _a; return (_a = diacriticsMap[x]) !== null && _a !== void 0 ? _a : x; });
}
function smartIncludes(text, query, isNormalizeAccentsDiacritics) {
    let t = text.toLowerCase();
    if (isNormalizeAccentsDiacritics) {
        t = normalizeAccentsDiacritics(t);
    }
    let q = query.toLowerCase();
    if (isNormalizeAccentsDiacritics) {
        q = normalizeAccentsDiacritics(q);
    }
    return excludeSpace(t).includes(q);
}
function smartStartsWith(text, query, isNormalizeAccentsDiacritics) {
    let t = text.toLowerCase();
    if (isNormalizeAccentsDiacritics) {
        t = normalizeAccentsDiacritics(t);
    }
    let q = query.toLowerCase();
    if (isNormalizeAccentsDiacritics) {
        q = normalizeAccentsDiacritics(q);
    }
    return excludeSpace(excludeEmoji(t)).startsWith(q);
}

function matchQuery$1(item, query, isNormalizeAccentsDiacritics) {
    // tag
    if (query.startsWith("#")) {
        const tags = item.tags.filter((tag) => smartIncludes(tag.slice(1), query.slice(1), isNormalizeAccentsDiacritics));
        return {
            type: tags.length > 0 ? "tag" : "not found",
            meta: tags,
        };
    }
    const qs = query.split("/");
    const file = qs.pop();
    const includeDir = qs.every((dir) => smartIncludes(item.file.parent.path, dir, isNormalizeAccentsDiacritics));
    if (!includeDir) {
        return { type: "not found" };
    }
    if (smartStartsWith(item.file.name, file, isNormalizeAccentsDiacritics)) {
        return { type: "prefix-name", meta: [item.file.name] };
    }
    const prefixNameMatchedAliases = item.aliases.filter((x) => smartStartsWith(x, file, isNormalizeAccentsDiacritics));
    if (prefixNameMatchedAliases.length > 0) {
        return {
            type: "prefix-name",
            meta: prefixNameMatchedAliases,
            alias: minBy(prefixNameMatchedAliases, (x) => x.length),
        };
    }
    if (smartIncludes(item.file.name, file, isNormalizeAccentsDiacritics)) {
        return { type: "name", meta: [item.file.name] };
    }
    const nameMatchedAliases = item.aliases.filter((x) => smartIncludes(x, file, isNormalizeAccentsDiacritics));
    if (nameMatchedAliases.length > 0) {
        return {
            type: "name",
            meta: nameMatchedAliases,
            alias: minBy(nameMatchedAliases, (x) => x.length),
        };
    }
    if (smartIncludes(item.file.path, file, isNormalizeAccentsDiacritics)) {
        return { type: "directory", meta: [item.file.path] };
    }
    return { type: "not found" };
}
function matchQueryAll$1(item, queries, isNormalizeAccentsDiacritics) {
    return queries.map((q) => matchQuery$1(item, q, isNormalizeAccentsDiacritics));
}
function stampMatchResults(item, queries, isNormalizeAccentsDiacritics) {
    return Object.assign(Object.assign({}, item), { matchResults: matchQueryAll$1(item, queries, isNormalizeAccentsDiacritics) });
}

const FOLDER = `<svg viewBox="0 0 100 100" class="folder" width="17" height="17"><path fill="currentColor" stroke="currentColor" d="M6.1,8c-3.3,0-6,2.7-6,6v73.8c-0.1,0.5-0.1,0.9,0.1,1.4c0.6,2.7,3,4.8,5.9,4.8h78c3,0,5.4-2.2,5.9-5.1 c0-0.1,0.1-0.2,0.1-0.4c0,0,0-0.1,0-0.1l0.1-0.3c0,0,0,0,0-0.1l9.9-53.6l0.1-0.2V34c0-3.3-2.7-6-6-6v-6c0-3.3-2.7-6-6-6H36.1 c0,0,0,0-0.1,0c-0.1,0-0.2-0.2-0.6-0.6c-0.5-0.6-1.1-1.5-1.7-2.5c-0.6-1-1.3-2.1-2.1-3C30.9,9,29.7,8,28.1,8L6.1,8z M6.1,12h22 c-0.1,0,0.1,0,0.6,0.6c0.5,0.6,1.1,1.5,1.7,2.5c0.6,1,1.3,2.1,2.1,3c0.8,0.9,1.9,1.9,3.6,1.9h52c1.1,0,2,0.9,2,2v6h-74 c-3.1,0-5.7,2.5-5.9,5.6h-0.1L10.1,34l-6,32.4V14C4.1,12.9,4.9,12,6.1,12z M16.1,32h78c1.1,0,2,0.9,2,2l-9.8,53.1l-0.1,0.1 c0,0.1,0,0.2-0.1,0.2c0,0.1,0,0.2-0.1,0.2c0,0,0,0.1,0,0.1c0,0,0,0,0,0.1c0,0.1,0,0.2-0.1,0.3c0,0.1,0,0.1,0,0.2 c0,0.1,0,0.2,0,0.2c-0.3,0.8-1,1.4-1.9,1.4h-78c-1.1,0-2-0.9-2-2L14,34.4l0.1-0.2V34C14.1,32.9,14.9,32,16.1,32L16.1,32z"></path></svg>`;
const ALIAS = `<svg viewBox="0 0 100 100" class="forward-arrow" width="16" height="16"><path fill="currentColor" stroke="currentColor" d="m9.9,89.09226c-0.03094,0 -0.05414,0 -0.08508,0c-1.06734,-0.04641 -1.91039,-0.92812 -1.89492,-1.99547c0.00774,-0.48726 1.14469,-48.13101 47.52,-49.44586l0,-13.89094c0,-0.7657 0.44086,-1.4618 1.12922,-1.78664c0.68062,-0.33258 1.5082,-0.23203 2.09601,0.2475l31.68,25.74c0.46406,0.37899 0.73476,0.9436 0.73476,1.53914c0,0.59555 -0.2707,1.16016 -0.72703,1.53914l-31.68,25.74c-0.59555,0.47953 -1.41539,0.57234 -2.10375,0.2475c-0.68836,-0.32485 -1.12922,-1.02094 -1.12922,-1.78664l0,-13.84453c-41.26289,0.75024 -43.49039,24.81961 -43.56773,25.85601c-0.06961,1.04414 -0.93586,1.84078 -1.97226,1.84078z"></path></svg>`;
const TAG = `<svg viewBox="0 0 100 100" class="hashtag" width="17" height="17"><path fill="currentColor" stroke="currentColor" d="M36,18l-1.5,16H20l-0.4,4h14.5l-2.4,26H17.2l-0.4,4h14.5L30,82h4l1.3-14h26L60,82h4l1.3-14h15.5l0.4-4H65.7l2.4-26h15.5 l0.4-4H68.5L70,18h-4l-1.5,16h-26L40,18L36,18z M38.1,38h26l-2.4,26h-26L38.1,38z"></path></svg>`;

function createItemDiv(item, aliases, options) {
    const itemDiv = createDiv({
        cls: [
            "another-quick-switcher__item",
            item.phantom ? "another-quick-switcher__phantom_item" : "",
        ],
    });
    const entryDiv = createDiv({
        cls: "another-quick-switcher__item__entry",
    });
    const titleDiv = createDiv({
        cls: "another-quick-switcher__item__title",
        text: options.showAliasesOnTop && aliases.length > 0
            ? aliases.join(" / ")
            : item.file.basename,
    });
    entryDiv.appendChild(titleDiv);
    if (options.showDirectory) {
        const directoryDiv = createDiv({
            cls: "another-quick-switcher__item__directory",
        });
        directoryDiv.insertAdjacentHTML("beforeend", FOLDER);
        directoryDiv.appendText(` ${item.file.parent.name}`);
        entryDiv.appendChild(directoryDiv);
    }
    itemDiv.appendChild(entryDiv);
    return itemDiv;
}
function createDescriptionDiv(item, aliases, tags, options) {
    const descriptionDiv = createDiv({
        cls: "another-quick-switcher__item__descriptions",
    });
    if (aliases.length > 0) {
        const aliasDiv = createDiv({
            cls: "another-quick-switcher__item__description",
        });
        const displayAliases = options.showAliasesOnTop
            ? [item.file.basename]
            : aliases;
        displayAliases.forEach((x) => {
            const aliasSpan = createSpan({
                cls: "another-quick-switcher__item__description__alias",
            });
            aliasSpan.insertAdjacentHTML("beforeend", ALIAS);
            aliasSpan.appendText(x);
            aliasDiv.appendChild(aliasSpan);
        });
        descriptionDiv.appendChild(aliasDiv);
    }
    if (tags.length > 0) {
        const tagsDiv = createDiv({
            cls: "another-quick-switcher__item__description",
        });
        tags.forEach((x) => {
            const tagsSpan = createSpan({
                cls: "another-quick-switcher__item__description__tag",
            });
            tagsSpan.insertAdjacentHTML("beforeend", TAG);
            tagsSpan.appendText(x.replace("#", ""));
            tagsDiv.appendChild(tagsSpan);
        });
        descriptionDiv.appendChild(tagsDiv);
    }
    return descriptionDiv;
}
function createElements(item, options) {
    const aliases = uniqFlatMap(item.matchResults.filter((res) => res.alias), (x) => { var _a; return (_a = x.meta) !== null && _a !== void 0 ? _a : []; });
    const tags = uniqFlatMap(item.matchResults.filter((res) => res.type === "tag"), (x) => { var _a; return (_a = x.meta) !== null && _a !== void 0 ? _a : []; });
    const itemDiv = createItemDiv(item, aliases, options);
    if (aliases.length === 0 && tags.length === 0) {
        return { itemDiv };
    }
    const descriptionDiv = createDescriptionDiv(item, aliases, tags, options);
    return {
        itemDiv,
        descriptionDiv,
    };
}

function buildLogMessage(message, msec) {
    return `${message}: ${Math.round(msec)}[ms]`;
}
class AnotherQuickSwitcherModal extends obsidian.SuggestModal {
    constructor(app, initialMode, settings) {
        var _a;
        super(app);
        this.initialMode = initialMode;
        this.appHelper = new AppHelper(app);
        this.settings = settings;
        this.setInstructions([
            {
                command: "[↑↓][ctrl/cmd n or p][ctrl/cmd j or k]",
                purpose: "navigate",
            },
            { command: "[↵]", purpose: "open" },
            { command: "[ctrl/cmd ↵]", purpose: "open in new pane" },
            { command: "[shift ↵]", purpose: "create" },
            { command: "[ctrl/cmd shift ↵]", purpose: "create in new pane" },
            { command: "[alt ↵]", purpose: "insert to editor" },
            { command: "[esc]", purpose: "dismiss" },
        ]);
        this.scope.register(["Mod"], "Enter", () => this.chooser.useSelectedItem({ metaKey: true }));
        this.scope.register(["Alt"], "Enter", () => this.chooser.useSelectedItem({ altKey: true }));
        this.scope.register(["Shift"], "Enter", () => {
            if (this.searchQuery) {
                this.handleCreateNew(this.searchQuery, false);
            }
        });
        this.scope.register(["Shift", "Mod"], "Enter", () => {
            if (this.searchQuery) {
                this.handleCreateNew(this.searchQuery, true);
            }
        });
        this.scope.register(["Mod"], "N", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowDown" }));
        });
        this.scope.register(["Mod"], "P", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowUp" }));
        });
        this.scope.register(["Mod"], "J", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowDown" }));
        });
        this.scope.register(["Mod"], "K", () => {
            document.dispatchEvent(new KeyboardEvent("keydown", { key: "ArrowUp" }));
        });
        const phantomItems = this.settings.showExistingFilesOnly
            ? []
            : this.appHelper.searchPhantomFiles().map((x) => ({
                file: x,
                aliases: [],
                tags: [],
                phantom: true,
                matchResults: [],
            }));
        const activeFilePath = (_a = app.workspace.getActiveFile()) === null || _a === void 0 ? void 0 : _a.path;
        const markdownItems = app.vault
            .getMarkdownFiles()
            .filter((x) => x.path !== activeFilePath && app.metadataCache.getFileCache(x))
            .map((x) => {
            var _a, _b, _c;
            const cache = app.metadataCache.getFileCache(x); // already filtered
            return {
                file: x,
                aliases: (_a = obsidian.parseFrontMatterAliases(cache.frontmatter)) !== null && _a !== void 0 ? _a : [],
                tags: uniq([
                    ...((_b = cache.tags) !== null && _b !== void 0 ? _b : []).map((x) => x.tag),
                    ...((_c = obsidian.parseFrontMatterTags(cache.frontmatter)) !== null && _c !== void 0 ? _c : []),
                ]),
                phantom: false,
                matchResults: [],
            };
        });
        this.originItems = [...markdownItems, ...phantomItems];
        this.ignoredItems = this.ignoreItems(initialMode);
    }
    handleCreateNew(searchQuery, newLeaf) {
        return __awaiter(this, void 0, void 0, function* () {
            const file = yield this.appHelper.createMarkdown(this.searchQuery);
            if (!file) {
                // noinspection ObjectAllocationIgnored
                new obsidian.Notice("This file already exists.");
                return;
            }
            this.appHelper.openMarkdownFile(file, newLeaf);
            this.close();
        });
    }
    ignoreItems(mode) {
        const _ignoreItems = (patterns) => ignoreItems(this.originItems, patterns, (x) => x.file.path);
        switch (mode) {
            case "normal":
                return _ignoreItems(this.settings.ignoreNormalPathPrefixPatterns);
            case "recent":
                return _ignoreItems(this.settings.ignoreRecentPathPrefixPatterns);
            case "backlink":
                return _ignoreItems(this.settings.ignoreBackLinkPathPrefixPatterns);
        }
    }
    getSuggestions(query) {
        var _a;
        const start = performance.now();
        let lastOpenFileIndexByPath = {};
        this.app.workspace.getLastOpenFiles().forEach((v, i) => {
            lastOpenFileIndexByPath[v] = i;
        });
        let searchQuery = query;
        const changeMode = (mode, slice = 0) => {
            if (this.mode !== mode) {
                this.ignoredItems = this.ignoreItems(mode);
            }
            this.mode = mode;
            searchQuery = query.slice(slice);
        };
        // noinspection IfStatementWithTooManyBranchesJS
        if (query.startsWith(":n ")) {
            changeMode("normal", 3);
        }
        else if (query.startsWith(":r ")) {
            changeMode("recent", 3);
        }
        else if (query.startsWith(":b ")) {
            changeMode("backlink", 3);
        }
        else {
            changeMode(this.initialMode);
        }
        this.searchQuery = searchQuery;
        const qs = searchQuery.split(" ").filter((x) => x);
        if (this.mode === "backlink") {
            const activeFilePath = (_a = this.app.workspace.getActiveFile()) === null || _a === void 0 ? void 0 : _a.path;
            if (!activeFilePath) {
                return [];
            }
            // ✨ If I can use MetadataCache.getBacklinksForFile, I would like to use it instead of original createBacklinksMap :)
            const backlinksMap = this.appHelper.createBacklinksMap();
            const items = this.ignoredItems
                .filter((x) => { var _a; return (_a = backlinksMap[activeFilePath]) === null || _a === void 0 ? void 0 : _a.has(x.file.path); })
                .map((x) => stampMatchResults(x, qs, this.settings.normalizeAccentsAndDiacritics))
                .filter((x) => x.matchResults.every((x) => x.type !== "not found"))
                .slice(0, this.settings.maxNumberOfSuggestions);
            this.showDebugLog(() => buildLogMessage(`Get suggestions: ${query}`, performance.now() - start));
            return items;
        }
        if (!query) {
            return this.ignoredItems
                .sort(sorter((x) => x.file.stat.mtime, "desc"))
                .sort(sorter((x) => { var _a; return (_a = lastOpenFileIndexByPath[x.file.path]) !== null && _a !== void 0 ? _a : 65535; }))
                .slice(0, this.settings.maxNumberOfSuggestions);
        }
        let suggestions = this.ignoredItems
            .map((x) => stampMatchResults(x, qs, this.settings.normalizeAccentsAndDiacritics))
            .filter((x) => x.matchResults.every((x) => x.type !== "not found"))
            .sort(sorter((x) => x.file.stat.mtime, "desc"))
            .sort(sorter((x) => { var _a; return (_a = lastOpenFileIndexByPath[x.file.path]) !== null && _a !== void 0 ? _a : 65535; }));
        if (this.mode === "normal") {
            suggestions = suggestions
                .sort(sorter((x) => x.matchResults.some((x) => x.type === "prefix-name" || x.type === "name")
                ? 0
                : 1))
                .sort(sorter((x) => {
                const firstPrefixMatch = x.matchResults.find((x) => x.type === "prefix-name");
                if (firstPrefixMatch) {
                    return (1000 -
                        (firstPrefixMatch.alias
                            ? firstPrefixMatch.alias.length
                            : x.file.name.length));
                }
                return 0;
            }, "desc"));
        }
        const items = suggestions.slice(0, this.settings.maxNumberOfSuggestions);
        this.showDebugLog(() => buildLogMessage(`Get suggestions: ${query}`, performance.now() - start));
        return items;
    }
    renderSuggestion(item, el) {
        const { itemDiv, descriptionDiv } = createElements(item, {
            showDirectory: this.settings.showDirectory,
            showAliasesOnTop: this.settings.showAliasesOnTop,
        });
        el.appendChild(itemDiv);
        if (descriptionDiv) {
            el.appendChild(descriptionDiv);
        }
    }
    onChooseSuggestion(item, evt) {
        return __awaiter(this, void 0, void 0, function* () {
            let fileToOpened = item.file;
            if (evt.altKey) {
                this.appHelper.insertLinkToActiveFileBy(fileToOpened);
                return;
            }
            if (item.phantom) {
                fileToOpened = yield this.app.vault.create(item.file.path, "");
            }
            const offset = this.mode === "backlink"
                ? this.appHelper.findFirstLinkOffset(item.file, this.app.workspace.getActiveFile() // never undefined
                )
                : undefined;
            this.appHelper.openMarkdownFile(fileToOpened, evt.ctrlKey || evt.metaKey, offset);
        });
    }
    showDebugLog(toMessage) {
        if (this.settings.showLogAboutPerformanceInConsole) {
            console.log(toMessage());
        }
    }
}

function matchQuery(item, query, matcher, isNormalizeAccentsDiacritics) {
    const qs = query.split("/");
    const folder = qs.pop();
    return (qs.every((dir) => smartIncludes(item.folder.parent.path, dir, isNormalizeAccentsDiacritics)) && matcher(item, folder));
}
function matchQueryAll(item, queries, matcher, isNormalizeAccentsDiacritics) {
    return queries.every((q) => matchQuery(item, q, matcher, isNormalizeAccentsDiacritics));
}
function stampMatchType(item, queries, isNormalizeAccentsDiacritics) {
    if (matchQueryAll(item, queries, (item, query) => smartStartsWith(item.folder.name, query, isNormalizeAccentsDiacritics), isNormalizeAccentsDiacritics)) {
        return Object.assign(Object.assign({}, item), { matchType: "prefix-name" });
    }
    if (matchQueryAll(item, queries, (item, query) => smartIncludes(item.folder.name, query, isNormalizeAccentsDiacritics), isNormalizeAccentsDiacritics)) {
        return Object.assign(Object.assign({}, item), { matchType: "name" });
    }
    if (matchQueryAll(item, queries, (item, query) => smartIncludes(item.folder.path, query, isNormalizeAccentsDiacritics), isNormalizeAccentsDiacritics)) {
        return Object.assign(Object.assign({}, item), { matchType: "directory" });
    }
    return item;
}
class MoveModal extends obsidian.SuggestModal {
    constructor(app, settings) {
        super(app);
        this.appHelper = new AppHelper(app);
        this.settings = settings;
        this.setInstructions([
            { command: "[↑↓]", purpose: "navigate" },
            { command: "[↵]", purpose: "move to" },
            { command: "[esc]", purpose: "dismiss" },
        ]);
        this.originItems = this.appHelper
            .getFolders()
            .filter((x) => !x.isRoot())
            .map((x) => ({
            folder: x,
        }));
        this.ignoredItems = ignoreItems(this.originItems, this.settings.ignoreMoveFileToAnotherFolderPrefixPatterns, (x) => x.folder.path);
    }
    getSuggestions(query) {
        const qs = query.split(" ").filter((x) => x);
        return this.ignoredItems
            .map((x) => stampMatchType(x, qs, this.settings.normalizeAccentsAndDiacritics))
            .filter((x) => x.matchType)
            .sort(sorter((x) => (x.matchType === "directory" ? 1 : 0)))
            .sort(sorter((x) => x.matchType === "prefix-name" ? 1000 - x.folder.name.length : 0, "desc"))
            .slice(0, 10);
    }
    renderSuggestion(item, el) {
        const itemDiv = createDiv({
            cls: "another-quick-switcher__item",
        });
        const entryDiv = createDiv({
            cls: "another-quick-switcher__item__entry",
        });
        const folderDiv = createDiv({
            cls: "another-quick-switcher__item__title",
            text: item.folder.name,
        });
        entryDiv.appendChild(folderDiv);
        const directoryDiv = createDiv({
            cls: "another-quick-switcher__item__directory",
        });
        directoryDiv.insertAdjacentHTML("beforeend", FOLDER);
        directoryDiv.appendText(` ${item.folder.parent.name}`);
        entryDiv.appendChild(directoryDiv);
        const prefixIcon = createSpan({
            cls: "another-quick-switcher__item__icon",
        });
        prefixIcon.insertAdjacentHTML("beforeend", FOLDER);
        itemDiv.appendChild(prefixIcon);
        itemDiv.appendChild(entryDiv);
        el.appendChild(itemDiv);
    }
    onChooseSuggestion(item) {
        return __awaiter(this, void 0, void 0, function* () {
            const activeFile = this.app.workspace.getActiveFile();
            if (!activeFile) {
                return;
            }
            yield this.app.fileManager.renameFile(activeFile, `${item.folder.path}/${activeFile.name}`);
        });
    }
}

function showSearchDialog(app, mode, settings) {
    const modal = new AnotherQuickSwitcherModal(app, mode, settings);
    modal.open();
}
function showMoveDialog(app, settings) {
    if (!app.workspace.getActiveFile()) {
        return;
    }
    const modal = new MoveModal(app, settings);
    modal.open();
}
function createCommands(app, settings) {
    return [
        {
            id: "normal-search",
            name: "Normal search",
            hotkeys: [{ modifiers: ["Mod", "Shift"], key: "p" }],
            callback: () => {
                showSearchDialog(app, "normal", settings);
            },
        },
        {
            id: "recent-search",
            name: "Recent search",
            hotkeys: [{ modifiers: ["Mod", "Shift"], key: "e" }],
            callback: () => {
                showSearchDialog(app, "recent", settings);
            },
        },
        {
            id: "backlink-search",
            name: "Backlink search",
            hotkeys: [{ modifiers: ["Mod", "Shift"], key: "h" }],
            checkCallback: (checking) => {
                if (checking) {
                    return Boolean(app.workspace.getActiveFile());
                }
                showSearchDialog(app, "backlink", settings);
            },
        },
        {
            id: "move",
            name: "Move file to another folder",
            hotkeys: [{ modifiers: ["Mod", "Shift"], key: "m" }],
            checkCallback: (checking) => {
                if (checking) {
                    return Boolean(app.workspace.getActiveFile());
                }
                showMoveDialog(app, settings);
            },
        },
    ];
}

const DEFAULT_SETTINGS = {
    showDirectory: true,
    showAliasesOnTop: false,
    showExistingFilesOnly: false,
    maxNumberOfSuggestions: 50,
    normalizeAccentsAndDiacritics: false,
    ignoreNormalPathPrefixPatterns: "",
    ignoreRecentPathPrefixPatterns: "",
    ignoreBackLinkPathPrefixPatterns: "",
    ignoreMoveFileToAnotherFolderPrefixPatterns: "",
    // debug
    showLogAboutPerformanceInConsole: false,
};
class AnotherQuickSwitcherSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Another Quick Switcher - Settings" });
        new obsidian.Setting(containerEl).setName("Show directory").addToggle((tc) => {
            tc.setValue(this.plugin.settings.showDirectory).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.showDirectory = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl).setName("Show aliases on top").addToggle((tc) => {
            tc.setValue(this.plugin.settings.showAliasesOnTop).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.showAliasesOnTop = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Show existing files only")
            .addToggle((tc) => {
            tc.setValue(this.plugin.settings.showExistingFilesOnly).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.showExistingFilesOnly = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Max number of suggestions")
            .addSlider((sc) => sc
            .setLimits(1, 255, 1)
            .setValue(this.plugin.settings.maxNumberOfSuggestions)
            .setDynamicTooltip()
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.maxNumberOfSuggestions = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Normalize accents/diacritics")
            .setDesc("⚠ If enabled, it is about 2 to 5 times slower than disabled")
            .addToggle((tc) => {
            tc.setValue(this.plugin.settings.normalizeAccentsAndDiacritics).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.normalizeAccentsAndDiacritics = value;
                yield this.plugin.saveSettings();
            }));
        });
        containerEl.createEl("h3", { text: "🔍 Normal search" });
        new obsidian.Setting(containerEl)
            .setName("Ignore prefix path patterns for Normal search")
            .addTextArea((tc) => {
            const el = tc
                .setPlaceholder("Prefix match patterns")
                .setValue(this.plugin.settings.ignoreNormalPathPrefixPatterns)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.ignoreNormalPathPrefixPatterns = value;
                yield this.plugin.saveSettings();
            }));
            el.inputEl.className =
                "another-quick-switcher__settings__ignore_path_patterns";
            return el;
        });
        containerEl.createEl("h3", { text: "⏱ Recent search" });
        new obsidian.Setting(containerEl)
            .setName("Ignore prefix path patterns for Recent search")
            .addTextArea((tc) => {
            const el = tc
                .setPlaceholder("Prefix match patterns")
                .setValue(this.plugin.settings.ignoreRecentPathPrefixPatterns)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.ignoreRecentPathPrefixPatterns = value;
                yield this.plugin.saveSettings();
            }));
            el.inputEl.className =
                "another-quick-switcher__settings__ignore_path_patterns";
            return el;
        });
        containerEl.createEl("h3", { text: "👀 Backlink search" });
        new obsidian.Setting(containerEl)
            .setName("Ignore prefix path patterns for Backlink search")
            .addTextArea((tc) => {
            const el = tc
                .setPlaceholder("Prefix match patterns")
                .setValue(this.plugin.settings.ignoreBackLinkPathPrefixPatterns)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.ignoreBackLinkPathPrefixPatterns = value;
                yield this.plugin.saveSettings();
            }));
            el.inputEl.className =
                "another-quick-switcher__settings__ignore_path_patterns";
            return el;
        });
        containerEl.createEl("h3", { text: "📁 Move file to another folder" });
        new obsidian.Setting(containerEl)
            .setName("Ignore prefix path patterns for Move file to another folder")
            .addTextArea((tc) => {
            const el = tc
                .setPlaceholder("Prefix match patterns")
                .setValue(this.plugin.settings.ignoreMoveFileToAnotherFolderPrefixPatterns)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.ignoreMoveFileToAnotherFolderPrefixPatterns =
                    value;
                yield this.plugin.saveSettings();
            }));
            el.inputEl.className =
                "another-quick-switcher__settings__ignore_path_patterns";
            return el;
        });
        containerEl.createEl("h3", { text: "Debug" });
        new obsidian.Setting(containerEl)
            .setName("Show log about performance in a console")
            .addToggle((tc) => {
            tc.setValue(this.plugin.settings.showLogAboutPerformanceInConsole).onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.showLogAboutPerformanceInConsole = value;
                yield this.plugin.saveSettings();
            }));
        });
    }
}

class AnotherQuickSwitcher extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new AnotherQuickSwitcherSettingTab(this.app, this));
            createCommands(this.app, this.settings).forEach((x) => this.addCommand(x));
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign(Object.assign({}, DEFAULT_SETTINGS), (yield this.loadData()));
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = AnotherQuickSwitcher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
